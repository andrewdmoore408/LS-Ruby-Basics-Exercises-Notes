PRINT ME (PART 1)

def print_me
  puts "I'm printing within the method!"
end

print_me

PRINT ME (PART 2)

def print_me
  "I'm printing the return value!"
end

puts print_me

GREETING THROUGH METHODS (PART 1)

def say_hello
  "Hello"
end

def say_world
  "World"
end

puts "#{say_hello} #{say_world}"

GREETING THROUGH METHODS (PART 2)

def hello
  'Hello'
end

def world
  'World'
end

def greet
  "#{hello} #{world}"
end

puts greet

MAKE AND MODEL

def car(make, model)
  puts make + ' ' + model
end

car('Dodge', 'Caravan')
car('Mini', 'Cooper')

--Further exploration--
	To print the result without a call to #puts inside the method, I'd prepend #puts before the method call like so: puts car(...). The difference here is whether or not the method prints the text itself, returning nil, or doesn't print itself but returns the text.

DAY OR NIGHT?

def time_of_day(is_daytime)
  puts is_daytime ? "It's daytime!" : "It's nighttime!"
end

daylight = [true, false].sample

time_of_day(daylight)

NAMING ANIMALS

def dog(name)
  return name
end

def cat(name)
  return name
end

puts "The dog's name is #{dog('Spot')}."
puts "The cat's name is #{cat('Ginger')}."

NAME NOT FOUND

def assign_name(name = "Bob")
  name
end

puts assign_name('Kevin') == 'Kevin'
puts assign_name == 'Bob'

MULTIPLY THE SUM

def add(x, y)
  x + y
end

def multiply(x, y)
  x * y
end

puts add(2, 2) == 4
puts add(5, 4) == 9
puts multiply(add(2, 2), add(5, 4)) == 36

RANDOM SENTENCE

names = ['Dave', 'Sally', 'George', 'Jessica']
activities = ['walking', 'running', 'cycling']

def name(names)
  names.sample
end

def activity(activities)
  activities.sample
end

def sentence(name, activity)
  "#{name} went #{activity} today!"
end

puts sentence(name(names), activity(activities))
